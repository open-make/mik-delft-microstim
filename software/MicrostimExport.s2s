'ExportMicrostimTrainingV1

'Global vars:
'var DCChanNum;          'Channel number of DC removed channel
var xl, xh;             'range markers
var xy;                 'Handle to xy view
var data%;              'Handle to data file
var MaskChan%;          'Handle to Channel 32 mask
var StartPoint;         'Handle to cursor 5 which stand for the start point for calculation     
var TrialMark$;           'Mark for Durations: m - Microstimulation, c- Catch, t- test, r - rewards, 1- 200, 2-400, 3- 800
var NameOfFile$;        'String which hold the name of file to be hold (taken from the name of the data file + added data\
var CalcTitle$;         'Title for XY view files
var ExperimentType;     
var AnalysisPath$;
var FolderName$;
var AnalysisFolderPath$;
var LicksChannel%:=20;
var IntensChannel%:=19;
'var SpikeChan%:=8;
'var BurstChan%:=11;
var EmptySpace$:="                                                                                                                                                                                                                               ";


var intensch%;
var sTime,eTime;
AnalysisPath$:="D:\Jiyunsetup Data\Moritz";
'var HighPassChan%:=6;
'var JuxtaChan%:=3; 

var Path$;
var Continue%:=0;;
var AnalyzeData%:=1;
Path$:="D:\Jiyunsetup Data\Moritz";
'AnalyseData(Continue%);
repeat
    FilePathSet(Path$);    
    'Path$:=FilePath$(0);
    FileOpen("",0);
    data%:= View();
    FrontView(data%);
    AnalyzeData%:=Interact(EmptySpace$+"Do you want to analyze data?",1023,"","Yes","No");
    if AnalyzeData% = 1 then    
        Continue%:=ExportAll();
    else
        FrontView(data%);
        FileClose(0);
        Continue%:=Query(FolderName$ + " was done. Do you want to continue analysis?","Yes","No");
    endif;
    
    FilePathSet(Path$);
    
until Continue%=0;


func ExportAll()

var Cont%;
var IsTestDay1;
if ChanVisible(IntensChannel%)=0 then
    intensch%:=MemChan(0,30);
    MemImport(intensch%,30 , 0, MaxTime());
    ChanShow(intensch%);
    ChanSave(intensch%, IntensChannel%);
    ChanShow(IntensChannel%);
    ChanTitle$(IntensChannel%,"IntensTxt");
endif;
DrawMode(IntensChannel%,14,1);

CreateLicksChan(0,MaxTime());

'OrderChannels();


XRange(XLow(),XLow()+10);'Sets XRange according to Xlow positions
' make sure you have cursor 5 and 6
if CursorExists(5) = 0 then
    CursorNew(1,5);             'Create Cursor 5
    Cursor(5,0);
    CursorLabel(4,5,"Cell Start");
    CursorNew(1,6);             'Create Cursor 6
    Cursor(6,MaxTime());
    CursorLabel(4,6,"Cell End");    
    Interact("                                                                          PLEASE POSITION START AND END CURSOR FOR MEASURE (CURSOR 5, Start; Cursor 6, End) AND PRESS OK",1023);
endif;
CursorLabel(4,5,"Start");
CursorLabel(4,6,"End");    

sTime:=View(data%).Cursor(5);
eTime:=View(data%).Cursor(6);

'PeaksCount(sTime,eTime);
'ChanOrder(3,-1,SpikeChan%);
'DelMicroSpikes("t",sTime,eTime);
'DelMicroSpikes("r",sTime,eTime);
'MarkBursts(sTime,eTime);
'ChanOrder(JuxtaChan%,1,SpikeChan%);
'ChanOrder(SpikeChan%,-1,BurstChan%);

' Calc Reaction Time
MaskChan%:= ChanDuplicate(32);  'Dupilicate Channel 32
FolderName$:=GetFolderName$();
CalcReact(MaskChan%,"m");         'Reaction Time count microstimulation test
MaskChan%:= ChanDuplicate(32);
CalcReact(MaskChan%,"c");         'Reaction Time count catch trials test
MaskChan%:= ChanDuplicate(32);
CalcReact(MaskChan%,"t");         'Reaction Time count test trials. The new Folder Path is created by SaveXYView which is called from CalcReact and creates the new cell folder name
MaskChan%:= ChanDuplicate(32);
CalcReact(MaskChan%,"r");         'Reaction Time count pairing trials

ExportTextMarksAsTXT(sTime,eTime);
ExportLickTimes(sTime,eTime);
'ExportSpikeTimes(sTime,eTime);
'ExportBurstTimes(sTime,eTime);

FrontView(data%);
FileClose(0);
FilePathSet(Path$);
Cont%:=Query(FolderName$ + " was done. Do you want to continue analysis?","Yes","No");
return Cont%;
end;


'GD120309 - GDCalcReact(MaskChan%,TrialMark$): This function is the main function that calculate reaction times in all sessions
'of a specified Duration. It get the MaskChannel handle and TrialMark$ as string
'and deliver it to next fucntions

func CalcReact(MaskChan%,TrialMark$)
CalcTitle$:="ReactCalc";                          'Title for XY views file names
MaskChan%:=MakeMaskCh(MaskChan%,TrialMark$);    'Create a mask according to the Dur variable
SetCursorsReact();                         'Set the position of the cursors according to this Dur
xy:=MakeReactCalcXYView(TrialMark$);       'Make the XYView
SaveXYView(CalcTitle$,TrialMark$);                         'Save the XY view as sxy file and txt file.
return;
end;

'GD120309 - GDMakeMaskCh(MaskChan%,TrialMark$): This function masks Channel 32 for the specific Duration mark
'It get the MaskChannel handle and Duration as integer 1,2,4,8
'and returns a handle to the masked channel

func MakeMaskCh(MaskChan%,TrialMark$);
MarkMask(MaskChan%,0);                          'Set mode 0 of MarkMask function
MarkMask(MaskChan%,0,0,-1);                     'Exclude everything in layer 0					
MarkMask(MaskChan%,0,1,TrialMark$);             'Show only trial markers for TrailMark$ stimulation
return MaskChan%;
end;


'GD120309 - GDSetCursorsReact(): This function sets the cursor 1 to search for first lick in a 2.2 sec window

func SetCursorsReact();
if CursorExists(1) = 0 then
    CursorNew(0,1);             'Create Cursor 1
endif;
if CursorExists(2) = 0 then
    CursorNew(0,2);             'Create Cursor 2
endif;

'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'
'IMPORTANT: Bounderies for licks: 2.2 seconds FROM stimulus start, and start 0.1 sec AFTER stimulus srart 
CursorActive(1,14,1,"Cursor(0)","Cursor(0)+2.2","Cursor(0)-0.1");	'Finds first lick after stimulus
'
'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
return;
end;



'GD120309 - GDMakeReactCalcXYView(TrialMark$): This function creates the XYView of time vs. sum of spikes in each data point
'It gets TrialMark$ to add information. Iterate on global MaskChan%.
'It uses Cursors positions + MaskChan% variable and returns a handle to the xy view.

func MakeReactCalcXYView(TrialMark$)

docase 
case TrialMark$="m" then
    xy:= MeasureToXY(14,MaskChan%,0.1,1,0,0); 				'GD180309 - changed flgs% from 2 to 0 to avoid user check for positions. Cursor 0 iterates through channel 1(licks) events. 14- go over data points which indicates the trails events
    Window(0,50,50,100);                                    'Set window size
    MeasureX(102,0,"Cursor(0)"); 							'Stimulus time
    MeasureY(102,0,"Cursor(1)-Cursor(0)"); 					'Reaction time (i.e. first lick from stimulus)
    MeasureChan(1,"RT "+TrialMark$);                        'Set title of channel 1 in txt file
    Process(sTime,eTime,0,1,0,32,0.2,0.11,109);'GD130209 - changeed max time to Cursor(6).'Marker code for "m"
case TrialMark$ = "r" then
    xy:= MeasureToXY(14,MaskChan%,0.1,1,0,0); 				'GD180309 - changed flgs% from 2 to 0 to avoid user check for positions. Cursor 0 iterates through channel 2 (licks) events. 14- go over data points which indicates the trails events
    Window(0,50,50,100);                                    'Set window size
    MeasureX(102,0,"Cursor(0)-0.440"); 							'Stimulus time
    MeasureY(102,0,"Cursor(1)-Cursor(0)"); 					'Reaction time (i.e. first lick from stimulus)
    MeasureChan(1,"RT "+TrialMark$);                        'Set title of channel 1 in txt file
    'Process(sTime,eTime,0,1,0,32,0.2,0.11,109);'GD130209 - changeed max time to Cursor(6).'Marker code for "m"
    'Process(sTime,eTime,0,1,0,32,0.2,0.44,114); ' for "r" pre process of 440 ms
    Process(sTime,eTime,0,1);     'Create XY view
    
else
    xy:= MeasureToXY(14,MaskChan%,0.1,1,0,0); 				'GD180309 - changed flgs% from 2 to 0 to avoid user check for positions. Cursor 0 iterates through channel 2 (licks) events. 14- go over data points which indicates the trails events
    Window(0,50,50,100);                                    'Set window size
    MeasureX(102,0,"Cursor(0)"); 							'Stimulus time
    MeasureY(102,0,"Cursor(1)-Cursor(0)"); 					'Reaction time (i.e. first lick from stimulus)
    MeasureChan(1,"RT "+TrialMark$);                        'Set title of channel 1 in txt file
    Process(sTime,eTime,0,1);     'Create XY view
endcase;    
return xy;                                              'Handle to xy view
end;

'GD120309 - GDSaveXYView(TrialMark$): This procedure saves the XYView as sxy file and txt file. It saves it it the predetermined location
'It gets Dur to add information to file name.

proc SaveXYView(CalcTitle$,TrialMark$)
WindowVisible(1);                                       'Show XY window
View(-1).XRange(xl,xh); 								'Restore original scale
View(-1).ChanDelete(MaskChan%);							'Delete otherwise stored in file
NameOfFile$:="";
NameOfFile$:=View(-1).FileName$(3);                     'Get file name from data file and return it as string
NameOfFile$:=NameOfFile$+View(-1).FileName$(4);         'Get file name from data file and return it as string
FolderName$:=NameOfFile$;
NameOfFile$:=NameOfFile$+CalcTitle$+TrialMark$+".sxy";  'add to this string Duration info + file extention
View(xy);                                               'Show XY window
'FileSaveAs(NameOfFile$,12);                             'Save file as XY view file
NameOfFile$:=DelStr$(NameOfFile$,Len(NameOfFile$)-3,4); 'remove .sxy extention from file name
NameOfFile$:=NameOfFile$+"TXT.txt";                     'and add TXT.txt extention
' create folder with the file name and save under it.
FilePathSet(AnalysisPath$+"\\"+FolderName$,0,1);
AnalysisFolderPath$:=AnalysisPath$+"\\"+FolderName$;
FileSaveAs(NameOfFile$,1);                              'Save file as txt file
PrintLog("\n " + NameOfFile$ + " was saved \n");
FileClose(0,-1);                                            'and close it
end;    


'GDExportTextMarksAsTXT
'GD120309 - Exports the Intensity (text marks channel as a TXT file
proc ExportTextMarksAsTXT(sTime,eTime)
var NameOfFile$;
var code%[4];
DrawMode(IntensChannel%,14,1);
'FilePathSet("");                'Sets the directory where all following files will be saved GD051009 - deactivated this option
NameOfFile$:="";
NameOfFile$:=View(-1).FileName$(3);                     'Get file name from data file and return it as string
NameOfFile$:=NameOfFile$+View(-1).FileName$(4);         'Get number after s
NameOfFile$:=NameOfFile$+"TextMarks.txt";        'Get file name from data file and return it as string

var txtHandle%:=FileNew(1);
var data$;
View(data%);
var time := NextTime(IntensChannel%,sTime,code%,data$);
while time<eTime and time>0 do
    View(txtHandle%).Print("%f\t%d\t%s\n",time,code%[0],data$);
    time := NextTime(IntensChannel%,time,code%,data$);
wend
FilePathSet(AnalysisFolderPath$);
View(txtHandle%).FileSaveAs(NameOfFile$,1,0);                              'Save file as txt file
View(txtHandle%).FileClose(0,-1); 'close current viewend;
end;

'Lick times
func CreateLicksChan(sTime,eTime)
' GD280710 - CreateLicksChan
' This script creates a new marker channel (10) with only 1 mark for each lick (instead of 2 in the original data 
var data%;
var LickChan%:=1;
var licksChan%;            'temp lick Channel
var levelchannel%;
var markChan%;          'Filtered marker channel
var mTime;              'Marker times
data%:= View();
FrontView(data%);
markChan%:=MemChan(0, 32);

MeasureX(102,1,"Cursor(0)","0",0);
MeasureY(100,1,"Cursor(0)","0",0);
'licksChan%:=MeasureToChan(0,"AllLicks",3,7,1,0,1,0,1);
'Process(sTime, eTime, 0, 1, licksChan%);

licksChan%:=MemChan(5,0);
MemImport(licksChan%,LickChan%, sTime, eTime);
MarkMask(licksChan%, -1, 1, -1); 'Clear filter
MarkMask(licksChan%, 0, -1, -1); 'Invert all code
MarkMask(licksChan%, 0, 1, 0);
DrawMode(licksChan%,2,0, 0,2); 'Set Lines
MarkShow(licksChan%, 0, 0); 'Set marker to display and mode
DrawMode(licksChan%,2,0, 0,2); 'Set Lines
MarkShow(licksChan%, 0, 0); 'Set marker to display and mode
'ChanShow(licksChan%);
ChanSave(licksChan%,LicksChannel%);   'Save Licks Channel
ChanShow(LicksChannel%);
ChanTitle$(LicksChannel%,"Licks");
DrawMode(LicksChannel%,2,0);
MarkShow(LicksChannel%, 0, 0); 'Set marker to display and mode
'ChanDelete(licksChan%);
ChanDelete(markChan%);
ChanDelete(licksChan%)
end;                     


proc ExportLickTimes(sTime,eTime)

NameOfFile$:="";
NameOfFile$:=View(-1).FileName$(3);                     'Get file name from data file and return it as string
NameOfFile$:=NameOfFile$+View(-1).FileName$(4);         'Get number after s
NameOfFile$:=NameOfFile$+"LickTimes.txt";        'Get file name from data file and return it as stringExportTextFormat(1,1,1,"\"","	");
ExportTextFormat(0, 0,1,"\"","	");
ExportChanFormat(1, 0,0);
ExportChanFormat(2, 0,0);
ExportChanFormat(5, 0,1,2);
ExportChanFormat(6, 0,0,6);
ExportChanFormat(7, 0,0,7);
ExportChanFormat(8, 0,0,8);
ExportChanList(0); 'Initialise the channel list
ExportChanList(sTime,eTime,LicksChannel%);
FilePathSet(AnalysisFolderPath$);
FileSaveAs(NameOfFile$,1);
FilePathSet(Path$);
end;

func GetFolderName$()
var NameOfFile$;
NameOfFile$:="";
NameOfFile$:=View(data%).FileName$(3);                     'Get file name from data file and return it as string
NameOfFile$:=NameOfFile$+View(-1).FileName$(4);         'Get file name from data file and return it as string
FolderName$:=NameOfFile$;
return FolderName$;
end;
